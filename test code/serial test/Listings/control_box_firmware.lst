C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 15:23:51 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE CONTROL_BOX_FIRMWARE
OBJECT MODULE PLACED IN .\Objects\control_box_firmware.obj
COMPILER INVOKED BY: C:\Program Files\Keil_v5\C51\BIN\C51.EXE control_box_firmware.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\control_box_firmware.lst) TABS(2) OBJECT(.\Objects\control_box_firmware.obj)

line level    source

   1          //matts board
   2          /*************************************************************************
   3           *  @File Descption: Read states of manual override buttons of control_box
   4           *  and bi-directional communication via UART with main_board.
   5           *  @File: control_box_firmware.c
   6           *  @author(s):
   7           *  -Tawfic Rabbani, Embedded Systems Engineer, head of softwar
   8           *  -Matthew Santos, Electrical and Software Engineer
   9           *  @Property of SEDS UCSD
  10           *  @since: 10/2016
  11           *************************************************************************/
  12          #include "reg60s2.h" //Include reg file for 8051 architecure
  13          #include <math.h> //used for pow function
  14          #define OUT_COUNT 19 //1 tog + 12 sw + 2 pot + 4 crc = 19 total send elements
  15          #define IN_COUNT 30 //TODO: number of elements to receive
  16          
  17          /*************************************************************************
  18           *                            -- VARIABLES --
  19           *  Each variable is a pin on the MCU that can be read/write 1/0.
  20           *  Syntax:
  21           *       varaible-type  variable-name = pin;
  22           *************************************************************************/
  23          sfr P4SW = 0xBB;
  24          
  25          sbit LED1 = P0^0;
  26          sbit LED2 = P0^1;
  27          sbit LED3 = P0^2;
  28          sbit LED4 = P0^3;
  29          sbit LED5 = P0^4;
  30          sbit LED6 = P0^5;
  31          sbit LED7 = P0^6;
  32          sbit LED8 = P0^7;
  33          
  34          sbit pot1 = P1^0;
  35          sbit pot2 = P1^1;
  36          sbit battlvl = P1^2;
  37          sbit sw1 = P1^3;
  38          sbit dc = P1^4;
  39          sbit din = P1^5;
  40          sbit cs= P1^6;
  41          sbit sclk = P1^7;
  42          
  43          sbit LED12 = P2^7;
  44          sbit sw8 = P2^6;
  45          sbit sw9 = P2^5;
  46          sbit sw10 = P2^4;
  47          sbit sw11 = P2^3;
  48          sbit sw12 = P2^2;
  49          sbit swtog = P2^1;
  50          sbit LEDtog = P2^0;
  51          
  52          sbit sw2 = P3^2;
  53          sbit sw3 = P3^3;
  54          sbit sw4 = P3^4;
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 15:23:51 PAGE 2   

  55          sbit sw5 = P3^5;
  56          sbit sw6 = P3^6;
  57          sbit sw7 = P3^7;
  58          
  59          sbit LED9 = P4^6;
  60          sbit LED10 = P4^5;
  61          sbit LED11 = P4^4;
  62          /*------------------------------------------------------------------*/
  63          /* --- STC MCU Limited ---------------------------------------------*/
  64          /* --- STC12C5Axx Series MCU UART (8-bit/9-bit)Demo ----------------*/
  65          /* --- Mobile: (86)13922805190 -------------------------------------*/
  66          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
  67          /* --- Tel: 86-0513-55012928,55012929,55012966----------------------*/
  68          /* --- Web: www.STCMCU.com -----------------------------------------*/
  69          /* --- Web: www.GXWMCU.com -----------------------------------------*/
  70          /* If you want to use the program or the program referenced in the  */
  71          /* article, please specify in which data and procedures from STC    */
  72          /*------------------------------------------------------------------*/
  73          
  74          typedef unsigned char BYTE;
  75          typedef unsigned int WORD;
  76          
  77          //#define FOSC 11059200L      //System frequency
  78          //#define BAUD 9600           //UART baudrate
  79          #define STARTKEY 's'
  80          #define ENDKEY 'e'
  81          
  82          bit busy;
  83          
  84          void SendData(BYTE dat);
  85          void SendString(char *s);
  86          void delay(unsigned int x);
  87          
  88          unsigned char input[10]; //stores all recieved inputs
  89          int i = 0;
  90          int index = 0;
  91          bit storing = 0;
  92          bit dataChanged = 1;
  93          
  94          void main()
  95          {
  96   1        for(i = 0; i < 10; ++i) { //initial array is numbers 1-10
  97   2          input[i] = i;
  98   2        }
  99   1        SCON = 0x50;                //8-bit variable UART
 100   1        TMOD = 0x20;                //timer 1 in mode 2 i.e. auto reload mode
 101   1        TH1 = 0xFD;                 //reload value is FD for 9600 baud rate
 102   1        TR1 = 1;                    //Timer 1 enable
 103   1        ES = 1;                     //Enable UART interrupt
 104   1        EA = 1;                     //Open master interrupt switch
 105   1        SendString("STC12C5A60S2\r\nUart Test !\r\n");
 106   1        while(1){
 107   2          delay(500);
 108   2          if(dataChanged) { //data has been changed
 109   3            SendString(input); //send the data
 110   3            dataChanged = 0; //resest dataB;
 111   3          }
 112   2        }
 113   1      }
 114          
 115          /*----------------------------
 116          UART interrupt service routine
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 15:23:51 PAGE 3   

 117          ----------------------------*/
 118          void Uart_Isr() interrupt 4 using 1
 119          {
 120   1        unsigned char c;
 121   1        if(RI) { //receive flagged
 122   2          RI = 0; //reset receive flag
 123   2          c = SBUF; //store buffer in c
 124   2          if(c == STARTKEY) { //start key is received
 125   3            storing = 1; //set that we are now storing
 126   3          } else if(c == ENDKEY) { //end key is received
 127   3            storing = 0; //set that we are done storing
 128   3            index = 0; //reset index
 129   3            dataChanged = 1;
 130   3          } else if(storing) { //we are in storing mode
 131   3            input[index] = c; //store SBUF in current index of array
 132   3            ++index; //increment array index
 133   3          }
 134   2        }
 135   1          
 136   1          if(TI) { //transmit flagged
 137   2            TI = 0; //Clear transmit interrupt flag
 138   2            busy = 0; //Clear transmit busy flag
 139   2          }
 140   1      }
 141          
 142          /*----------------------------
 143          Send a byte data to UART
 144          Input: dat (data to be sent)
 145          Output:None
 146          ----------------------------*/
 147          void SendData(BYTE dat)
 148          {
 149   1          while (busy);             //Wait for the completion of the previous data is sent
 150   1          busy = 1;
 151   1          SBUF = dat;               //Send data to UART buffer
 152   1      }
 153          
 154          /*----------------------------
 155          Send a string to UART
 156          Input: s (address of string)
 157          Output:None
 158          ----------------------------*/
 159          void SendString(char *s)
 160          {
 161   1          while (*s)              //Check the end of the string
 162   1          {
 163   2              SendData(*s++);     //Send current char and increment string ptr
 164   2          }
 165   1      }
 166          
 167          void delay(unsigned int x) {
 168   1        unsigned int a;
 169   1        unsigned int b;
 170   1        for(a=x;a>0;a--) {
 171   2          for(b=1000;b>0;b--) {
 172   3            continue;
 173   3          }
 174   2        }
 175   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 15:23:51 PAGE 4   

   CODE SIZE        =    215    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
