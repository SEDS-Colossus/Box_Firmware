C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE CONTROL_BOX_FIRMWARE
OBJECT MODULE PLACED IN .\Objects\control_box_firmware.obj
COMPILER INVOKED BY: C:\Program Files\Keil_v5\C51\BIN\C51.EXE control_box_firmware.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\control_box_firmware.lst) TABS(2) OBJECT(.\Objects\control_box_firmware.obj)

line level    source

   1          //matts board
   2          /*************************************************************************
   3           *  @File Descption: Read states of manual override buttons of control_box
   4           *  and bi-directional communication via UART with main_board.
   5           *  @File: control_box_firmware.c
   6           *  @author(s):
   7           *  -Tawfic Rabbani, Embedded Systems Engineer, head of softwar
   8           *  -Matthew Santos, Electrical and Software Engineer
   9           *  @Property of SEDS UCSD
  10           *  @since: 10/2016
  11           *************************************************************************/
  12          #include "reg60s2.h" //Include reg file for 8051 architecure
  13          #include <math.h> //used for pow function
  14          #define BUTTON_DEBOUNCE_CHECKS 500
  15          
  16          /*************************************************************************
  17           *                            -- VARIABLES --
  18           *  Each variable is a pin on the MCU that can be read/write 1/0.
  19           *  Syntax:
  20           *       varaible-type  variable-name = pin;
  21           *************************************************************************/
  22          sfr P4SW = 0xBB;
  23          
  24          //sbit pot1 = P1^0;
  25          //sbit battlvl = P1^2;
  26          //sbit dc = P1^4;
  27          //sbit din = P1^5;
  28          //sbit cs= P1^6;
  29          //sbit sclk = P1^7;
  30          
  31          sbit sw9 = P2^5;
  32          sbit sw10 = P2^4;
  33          
  34          sbit swtog = P2^1;
  35          sbit LEDtog = P2^0;
  36          
  37          sbit LED9 = P4^6;
  38          sbit LED10 = P4^5;
  39          
  40          sbit LED11 = P4^4;
  41          
  42          sbit LED12 = P2^7;
  43          
  44          
  45          sbit LED1 = P0^0;
  46          sbit LED2 = P0^1;
  47          sbit LED3 = P0^2;
  48          sbit LED4 = P0^3;
  49          sbit LED5 = P0^4;
  50          sbit LED6 = P0^5;
  51          sbit LED7 = P0^6;
  52          sbit LED8 = P0^7;
  53          
  54          /*************************************************************************
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 2   

  55           *                                   --PROTOTYPES--
  56           *************************************************************************/
  57          //void uart_init(); //uart initialization
  58          void timer_init(); //Timer 2 in mode 2 for Baud rate for 9600
  59          //void uart_tx(unsigned char x); //transmit function to send data from 8051 to other device
  60          //unsigned char uart_rx(); //return function to receive data from other device
  61          //bit is_good(); //handshake check
  62          //bit receive(); //receive data from main_board
  63          //bit CRC_check(); //check if no data is lost
  64          void button_check(); //check which buttons are activated
  65          void leds_update(); //set led status to first half on input data
  66          //void verify_states(); //set pending led status based on button actions
  67          //void CRC_generator(); //generate CRC and append to end of data being sent
  68          //void send(); //send data to main_board
  69          //void print_errors(); //TODO: put codes into dictionary to print error messages
  70          bit ButtonPress(); //debounce code
  71          void delay(unsigned int x);
  72          
  73          /*************************************************************************
  74           *                          --GLOBAL VARIABLES--
  75           *************************************************************************/
  76          int OUT_COUNT = 19; //1 tog + 12 sw + 2 pot + 4 crc = 19 total send elements
  77          int IN_COUNT = 30; //1 tog + 12 sw + 2 pot + 4 crc = 19 total send elements
  78          unsigned char input[19]; //stores all recieved inputs
  79          unsigned char output[30]; //stores all commands to be sent
  80          long DIVISOR = 0x17; //x^4+x^2+x+1
  81          long xor_value = 0x0;
  82          long crc = 0x0;
  83          int remainder = 0;
  84          int i = 0;
  85          bit sw9B = 0;
  86          bit sw10B = 0;
  87          
  88          /*************************************************************************
  89           *                          -- MAIN FUNCTION --
  90           *  @Descption: This function will instatiate the UART connection.
  91           *               Inside the while(1) is where the main code will be
  92           *               written.the unsigned char array "input" will be where
  93           *               commands will be stored when they are sent over and
  94           *               then evaluated. The first bit of input will indicate
  95           *               an error message or a state message is being received.
  96           *               0 is a state message, 1 is an error message. Input loop
  97           *               will end when '?' is sent. This will be the indicator as
  98           *               when all informaiton has been sent.
  99           *
 100           *  @PRECONDITION: none
 101           *
 102           *  @POSTCONDITION: -connenction between two MCU's will be complete
 103           *                  -commands will be received and delt with
 104           *                  -commands will be sent to other MCU
 105           *
 106           *  @PARAMETER: none
 107           *
 108           *  @RETURN: none
 109           *************************************************************************/
 110          void main() {
 111   1        unsigned char LED10C = 0;
 112   1        P4SW = 0x70;
 113   1        while(1) {
 114   2          unsigned int count = 0;
 115   2          if(sw10 == 0) { //pressed initially
 116   3            while(sw10 == 0) ++count; //hold
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 3   

 117   3            if(count > 10) //held long enough
 118   3              sw10B = !sw10B; //switch
 119   3            LED10 = !sw10B; //set led state
 120   3          }
 121   2          
 122   2          delay(50);
 123   2          if(sw10B && (LED10C++ > 4)) {
 124   3            LED10C = 0;
 125   3            LED10 = !LED10;
 126   3          }
 127   2        /*
 128   2        
 129   2        while(1) {
 130   2          if(sw10 == 0) { //initially pressed
 131   2            //TODO: timer starts
 132   2            if(sw10 == 1) { //unpressed
 133   2              LED10 = 1; //turn off led
 134   2            else if(sw10 == 0) { //still pressed
 135   2              sw10B = !sw10B;
 136   2            }
 137   2          }
 138   2          
 139   2          /*
 140   2          while(sw10 == 0) {
 141   2            count10++;
 142   2            if(count10 > 50) {
 143   2              sw10B = !sw10B;
 144   2            }
 145   2          } */
 146   2          
 147   2        }
 148   1      }
 149          
 150          void delay(unsigned int x) {
 151   1        unsigned int a;
 152   1        unsigned int b;
 153   1        for(a=x;a>0;a--) {
 154   2          for(b=1000;b>0;b--) {
 155   3            continue;
 156   3          }
 157   2        }
 158   1      }
 159          
 160          /*************************************************************************
 161           *                          --IS_GOOD--
 162           *  @Descption:
 163           *
 164           *  @PRECONDITION:
 165           *
 166           *  @POSTCONDITION: checks if an the connection is good
 167           *                                 between the two UARTS
 168           *
 169           *  @PARAMETER: none
 170           *
 171           *  @RETURN: int
 172           *************************************************************************/
 173          /*
 174          bit is_good() {
 175            uart_tx('g');
 176            if(uart_rx() == 'g')
 177              return 1;
 178            else
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 4   

 179              return 0;
 180          }
 181          
 182          bit receive() {
 183               //the number of bits you add to the input is one less than the divisor
 184               for(i = 0; i < IN_COUNT; ++i) { //start input loop
 185                    input[i] = uart_rx();
 186               } //end input loop
 187               if(CRC_check()) //convert input to hex to save space -- this is stored in the global hex array
 188                    return 1;
 189               else
 190                    return 0;
 191          }
 192          
 193          bit CRC_check(){
 194               xor_value = 0x0;
 195               crc = 0x0;
 196               remainder = 0;
 197               for(i = 0; i != 30; i++);
 198                    crc = crc + (int)input[i]*pow(2,i);
 199          
 200               xor_value = crc ^ DIVISOR;
 201          
 202               remainder =  remainder + (xor_value % 2);
 203               xor_value = xor_value/2;
 204               remainder =  remainder + (xor_value % 2);
 205               xor_value = xor_value/2;
 206               remainder =  remainder + (xor_value % 2);
 207               xor_value = xor_value/2;
 208               remainder =  remainder + (xor_value % 2);
 209          
 210               if(remainder == 0)
 211                    return 1;
 212               else
 213                    return 0;
 214          }
 215          */
 216          void button_check() { //change this to what I have in peters board
 217   1        sw10B = ButtonPress();
 218   1      }
 219          
 220          bit ButtonPress()
 221          {
 222   1          static unsigned int buttonState = 0;
 223   1          static char buttonPressEnabled = 1;
 224   1      
 225   1          if(!sw10)
 226   1          {
 227   2              if(buttonState < BUTTON_DEBOUNCE_CHECKS)
 228   2              {
 229   3                  buttonState++;
 230   3              }
 231   2              else if(buttonPressEnabled)
 232   2              {
 233   3                  buttonPressEnabled = 0;
 234   3                  return 1;
 235   3              }
 236   2          }
 237   1          else if(buttonState > 0 )
 238   1          {
 239   2              buttonState--;
 240   2              // alternatively you can set buttonState to 0 here, but I prefer this way
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 5   

 241   2          }
 242   1          else
 243   1          {
 244   2              buttonPressEnabled = 1;
 245   2          }
 246   1      
 247   1          return 0;
 248   1      }
 249          
 250          void leds_update() {
 251   1        if(sw10B == 1) {
 252   2          LED10 = 1;
 253   2        }
 254   1        else {
 255   2          LED10 = 0;
 256   2        }
 257   1      }
 258          
 259          /*
 260          void verify_states() {
 261                  //solinoids are off -- LEDS are inverted. 1 == off, 0 == on
 262                  if(input[1] == '1' && input[14] == '0') //SW1
 263                    p0_0 = 1;
 264                  if(input[2] == '1' && input[15] == '0') //SW2
 265                    p0_1 = 1;
 266                  if(input[3] == '1' && input[16] == '0') //SW3
 267                    p0_2 = 1;
 268                  if(input[4] == '1' && input[17] == '0') //SW4
 269                    p0_3 = 1;
 270                  if(input[5] == '1' && input[18] == '0') //SW5
 271                    p0_4 = 1;
 272                  if(input[6] == '1' && input[19] == '0') //SW6
 273                    p0_5 = 1;
 274                  if(input[7] == '1' && input[20] == '0') //SW7
 275                    p0_6 = 1;
 276                  if(input[8] == '1' && input[21] == '0') //SW8
 277                    p0_7 = 1;
 278                  if(input[9] == '1' && input[22] == '0') //SW9
 279                    p4_6 = 1;
 280                  if(input[10] == '1' && input[23] == '0') //SW10
 281                    p4_5 = 1;
 282                  if(input[11] == '1' && input[24] == '0') //SW11
 283                    p4_4 = 1;
 284                  if(input[12] == '1' && input[25] == '0') //SW11
 285                    p2_7 = 1;
 286          
 287                  //if solinoids are on
 288                  if((input[1] == '1' || input[1] == '0') && input[14] == '1')
 289                    p0_1 = 0;
 290                  if((input[2] == '1' || input[2] == '0') && input[15] == '1')
 291                    p0_2 = 0;
 292                  if((input[3] == '1' || input[3] == '0') && input[16] == '1')
 293                    p0_3 = 0;
 294                  if((input[4] == '1' || input[4] == '0') && input[17] == '1')
 295                    p0_4 = 0;
 296                  if((input[5] == '1' || input[5] == '0') && input[18] == '1')
 297                    p0_5 = 0;
 298                  if((input[6] == '1' || input[6] == '0') && input[19] == '1')
 299                    p0_6 = 0;
 300                  if((input[7] == '1' || input[7] == '0') && input[20] == '1')
 301                    p0_7 = 0;
 302                  if((input[8] == '1' || input[8] == '0') && input[21] == '1')
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 6   

 303                    p4_6 = 0;
 304                  if((input[9] == '1' || input[9] == '0') && input[22] == '1')
 305                    p4_5 = 0;
 306                  if((input[10] == '1' || input[10] == '0') && input[23] == '1')
 307                    p4_4 = 0;
 308                  if((input[11] == '1' || input[11] == '0') && input[24] == '1')
 309                    p2_7 = 0;
 310                  if((input[12] == '1' || input[12] == '0') && input[25] == '1')
 311                    p2_2 = 0;
 312          }
 313          
 314          void CRC_generator() {
 315               xor_value = 0x0;
 316               crc = 0x0;
 317               remainder = 0;
 318               i = 0;
 319          
 320               for(i = 0; i != 18; i++)
 321                    crc = crc + (int)send[i]*pow(2,i);
 322          
 323               xor_value = crc ^ DIVISOR;
 324          
 325               for(i = 18; i != 15; i--) { // may need to be i != 14. Check through testing
 326                    remainder = xor_value %2;
 327                    xor_value = xor_value/2;
 328                    if (remainder == 1)
 329                         send[i] = '1';
 330                    else
 331                         send[i] = '0';
 332               }
 333          }
 334          
 335          void send() {
 336               i = 0;
 337               while (i != 18) {
 338                    uart_tx(send[i]);
 339                    i++;
 340               }
 341          }
 342          
 343          void print_errors() {
 344            //TODO: print erros to screen
 345          }
 346          */
 347          /*************************************************************************
 348           *                             -- UART INITIALIZATION --
 349           *  @Descption: First thing called from the main function. This will
 350           *              instantiate the uart
 351           *
 352           *  @PRECONDITION: main() is called
 353           *
 354           *  @POSTCONDITION: Data is set to 8 bit length and baud rate set to
 355           *                  9600 baud.
 356           *
 357           *  @PARAMETER: none
 358           *
 359           *  @RETURN: none
 360           *************************************************************************/
 361           /*
 362          void uart_init() {
 363            SCON = 0x50;  //Setting data as 8bit and receive enable
 364            timer_init(); //baud rate is 9600
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 7   

 365          }
 366          */
 367          /*************************************************************************
 368           *                       -- TIMER INITIALIZATION --
 369           *  @Descption: Timers will be set correct for the 8051 architecure. These
 370           *              timers set the reload mode for filling the buffer with
 371           *              messages to be sent.
 372           *
 373           *  @PRECONDITION: uart_init() is called
 374           *
 375           *  @POSTCONDITION: timers are set for correct reading bit lengths
 376           *
 377           *  @PARAMETER: none
 378           *
 379           *  @RETURN: none
 380           *************************************************************************/
 381          void timer_init() {
 382   1        TMOD = 0x20; //timer 1 in mode 2 i.e. auto reload mode
 383   1        TH1 = 0xFD;  //reload value is FD for 9600 baud rate
 384   1                     //(Found in table in READ_Me file)
 385   1        TR1 = 1;     //Timer 1 enable
 386   1      }
 387          
 388          /*************************************************************************
 389           *                       -- UART TRANSMITION --
 390           *  @Descption: Sends values to other device using uart transmition.
 391           *              Sends the single char value to the buffer and sends the
 392           *              char in 8 bits.
 393           *
 394           *  @PRECONDITION: called from main() from within main while loop
 395           *
 396           *  @POSTCONDITION: individual message will be sent as one char
 397           *
 398           *  @PARAMETER: unsigned char
 399           *
 400           *  @RETURN: none
 401           *************************************************************************/
 402          /*
 403          void uart_tx(unsigned char x) {
 404            SBUF = x;   //Load data to serial buffer register associated to UART
 405            while(!TI); //transmit flag change when MSB is sent
 406            TI=0;       //clear the transmit flag
 407          }
 408          */
 409          /*************************************************************************
 410           *                         -- UART RECEIVER --
 411           *  @Descption: Receives message from other device using the uart
 412           *              receiver pin. Message is read from the buffer and sent
 413           *              back to the user
 414           *
 415           *  @PRECONDITION: called from main() from within main while loop
 416           *
 417           *  @POSTCONDITION: individual 8 bit char read from the buffer and
 418           *                  sent back to the user
 419           *
 420           *  @PARAMETER: none
 421           *
 422           *  @RETURN: unsigned char
 423           *************************************************************************/
 424          /*
 425          unsigned char uart_rx() {
 426            unsigned char z;
C51 COMPILER V9.56.0.0   CONTROL_BOX_FIRMWARE                                              02/04/2017 21:36:04 PAGE 8   

 427            while(!RI); //receive flag gets changed only when 8bits are received in SBUF
 428            z = SBUF;   //Moving data into z variable
 429            RI = 0;
 430            return(z);
 431          }
 432          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     72       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
